generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model link {
    id          String      @id @default(uuid())
    url         String   @db.Text
    slug        String   @unique
    description String?
    createdAt   DateTime @default(now())
    createdBy   User?    @relation(fields: [creatorId], references: [id])
    creatorId   String

    @@index(slug)
    @@index([creatorId])
}

model Account {
    id                String     @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String      @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(uuid())
    name          String?
    username      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    links         link[]
    tasks         Task[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id        Int     @id @default(autoincrement())
    title     String
    content   String?
    url       String
    cron      String
    published Boolean @default(false)
    author    User?   @relation(fields: [authorId], references: [id])
    authorId  String?

    @@index([authorId])
}
